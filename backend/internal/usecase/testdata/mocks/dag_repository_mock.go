// Code generated by MockGen. DO NOT EDIT.
// Source: dag_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "davidterranova/jurigen/backend/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDAGRepository is a mock of DAGRepository interface.
type MockDAGRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDAGRepositoryMockRecorder
}

// MockDAGRepositoryMockRecorder is the mock recorder for MockDAGRepository.
type MockDAGRepositoryMockRecorder struct {
	mock *MockDAGRepository
}

// NewMockDAGRepository creates a new mock instance.
func NewMockDAGRepository(ctrl *gomock.Controller) *MockDAGRepository {
	mock := &MockDAGRepository{ctrl: ctrl}
	mock.recorder = &MockDAGRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAGRepository) EXPECT() *MockDAGRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDAGRepository) Create(ctx context.Context, dag *model.DAG) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDAGRepositoryMockRecorder) Create(ctx, dag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDAGRepository)(nil).Create), ctx, dag)
}

// Delete mocks base method.
func (m *MockDAGRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDAGRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDAGRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockDAGRepository) Get(ctx context.Context, id uuid.UUID) (*model.DAG, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.DAG)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDAGRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDAGRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockDAGRepository) List(ctx context.Context) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDAGRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDAGRepository)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockDAGRepository) Update(ctx context.Context, id uuid.UUID, fnUpdate func(model.DAG) (model.DAG, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, fnUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDAGRepositoryMockRecorder) Update(ctx, id, fnUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDAGRepository)(nil).Update), ctx, id, fnUpdate)
}
