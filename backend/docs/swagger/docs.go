// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Legal Tech Support",
            "email": "support@legaltech.example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/dags": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of all available Legal Case DAGs with ID, title, and validation status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DAGs"
                ],
                "summary": "List Legal Case DAGs",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved DAG list with summary information",
                        "schema": {
                            "$ref": "#/definitions/http.DAGSummaryListPresenter"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dags/validate": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Validate a DAG structure to ensure it meets all requirements (single root node, acyclic, valid relationships)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DAGs"
                ],
                "summary": "Validate Legal Case DAG",
                "parameters": [
                    {
                        "description": "DAG structure to validate",
                        "name": "dag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ValidateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DAG validation completed (may contain errors)",
                        "schema": {
                            "$ref": "#/definitions/http.ValidationResultPresenter"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dags/{dagId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve DAG metadata including ID, title, validation status, and statistics (without content)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DAGs"
                ],
                "summary": "Get Legal Case DAG metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DAG unique identifier (UUID)",
                        "name": "dagId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved DAG metadata",
                        "schema": {
                            "$ref": "#/definitions/http.DAGMetadataPresenter"
                        }
                    },
                    "400": {
                        "description": "Invalid DAG ID format",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "DAG not found",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a complete Legal Case DAG structure including questions, answers, and context",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DAGs"
                ],
                "summary": "Update Legal Case DAG",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DAG unique identifier (UUID)",
                        "name": "dagId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated DAG structure",
                        "name": "dag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.DAGPresenter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated DAG",
                        "schema": {
                            "$ref": "#/definitions/http.DAGPresenter"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or DAG ID format",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "DAG not found",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dags/{dagId}/content": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve complete Legal Case DAG content including ID, title, and all questions with answers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DAGs"
                ],
                "summary": "Get Legal Case DAG content",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DAG unique identifier (UUID)",
                        "name": "dagId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved DAG content",
                        "schema": {
                            "$ref": "#/definitions/http.DAGContentPresenter"
                        }
                    },
                    "400": {
                        "description": "Invalid DAG ID format",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "DAG not found",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dags/{dagId}/validate": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Validates an existing Legal Case DAG by ID, persisting validation results including status and statistics to the DAG metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DAGs"
                ],
                "summary": "Validate stored Legal Case DAG",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DAG unique identifier (UUID)",
                        "name": "dagId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DAG validation completed successfully (may contain validation errors)",
                        "schema": {
                            "$ref": "#/definitions/http.ValidationResultPresenter"
                        }
                    },
                    "400": {
                        "description": "Invalid DAG ID format",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "DAG not found",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during validation",
                        "schema": {
                            "$ref": "#/definitions/xhttp.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.AnswerPresenter": {
            "description": "An answer to a legal question with optional user context and structured metadata for evidence tracking",
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string",
                    "example": "Yes, age discrimination occurred"
                },
                "id": {
                    "type": "string",
                    "example": "fc28c4b6-d185-cf56-a7e4-dead499ff1e8"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "next_node": {
                    "type": "string",
                    "example": "8b007ce4-b676-5fb3-9f93-f5f6c41cb655"
                },
                "user_context": {
                    "type": "string",
                    "example": "Manager explicitly mentioned my age during termination"
                }
            }
        },
        "http.DAGContentPresenter": {
            "description": "DAG content including ID, title, and all nodes with answers",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.NodePresenter"
                    }
                },
                "title": {
                    "type": "string",
                    "example": "Employment Discrimination Case"
                }
            }
        },
        "http.DAGMetadataPresenter": {
            "description": "DAG metadata including ID, title, validation status, and statistics",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "is_valid": {
                    "type": "boolean",
                    "example": true
                },
                "statistics": {
                    "$ref": "#/definitions/http.ValidationStatisticsPresenter"
                },
                "title": {
                    "type": "string",
                    "example": "Employment Discrimination Case"
                }
            }
        },
        "http.DAGPresenter": {
            "description": "Legal Case DAG with questions, answers, and context",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.NodePresenter"
                    }
                },
                "title": {
                    "type": "string",
                    "example": "Employment Discrimination Case"
                }
            }
        },
        "http.DAGSummaryListPresenter": {
            "description": "List of DAG summaries with essential information for efficient overview",
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "dags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.DAGSummaryPresenter"
                    }
                }
            }
        },
        "http.DAGSummaryPresenter": {
            "description": "Summary information for a DAG including ID, title, and validation status",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "is_valid": {
                    "type": "boolean",
                    "example": true
                },
                "title": {
                    "type": "string",
                    "example": "Employment Discrimination Case"
                }
            }
        },
        "http.NodePresenter": {
            "description": "A question node with potential answers for legal case context building",
            "type": "object",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.AnswerPresenter"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "8b007ce4-b676-5fb3-9f93-f5f6c41cb655"
                },
                "question": {
                    "type": "string",
                    "example": "Were you discriminated against in the workplace?"
                }
            }
        },
        "http.ValidateRequest": {
            "description": "DAG validation request containing the DAG structure to validate",
            "type": "object",
            "required": [
                "dag"
            ],
            "properties": {
                "dag": {
                    "$ref": "#/definitions/http.DAGPresenter"
                }
            }
        },
        "http.ValidationErrorPresenter": {
            "description": "Detailed validation error with context information",
            "type": "object",
            "properties": {
                "answer_id": {
                    "type": "string",
                    "example": "fc28c4b6-d185-cf56-a7e4-dead499ff1e8"
                },
                "code": {
                    "type": "string",
                    "example": "DAG_HAS_CYCLES"
                },
                "message": {
                    "type": "string",
                    "example": "DAG contains 1 cycle(s). A valid DAG must be acyclic"
                },
                "node_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "severity": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "http.ValidationResultPresenter": {
            "description": "Comprehensive DAG validation results including errors, warnings, and statistics",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ValidationErrorPresenter"
                    }
                },
                "is_valid": {
                    "type": "boolean",
                    "example": true
                },
                "statistics": {
                    "$ref": "#/definitions/http.ValidationStatisticsPresenter"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ValidationWarningPresenter"
                    }
                }
            }
        },
        "http.ValidationStatisticsPresenter": {
            "description": "Statistical information about the DAG structure and validation results",
            "type": "object",
            "properties": {
                "cycle_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "has_cycles": {
                    "type": "boolean",
                    "example": false
                },
                "leaf_node_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "leaf_nodes": {
                    "type": "integer",
                    "example": 2
                },
                "max_depth": {
                    "type": "integer",
                    "example": 3
                },
                "root_node_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "root_nodes": {
                    "type": "integer",
                    "example": 1
                },
                "total_answers": {
                    "type": "integer",
                    "example": 12
                },
                "total_nodes": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "http.ValidationWarningPresenter": {
            "description": "Non-critical validation issue that doesn't prevent DAG usage",
            "type": "object",
            "properties": {
                "answer_id": {
                    "type": "string",
                    "example": "fc28c4b6-d185-cf56-a7e4-dead499ff1e8"
                },
                "code": {
                    "type": "string",
                    "example": "DEEP_NESTING"
                },
                "message": {
                    "type": "string",
                    "example": "DAG has deep nesting which may impact performance"
                },
                "node_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "xhttp.ErrorResponse": {
            "description": "Standard error response format for API failures",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "DAG not found"
                },
                "message": {
                    "type": "string",
                    "example": "failed to get DAG"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Bearer token authentication",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Operations for managing and retrieving Legal Case DAGs",
            "name": "DAGs"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Jurigen API",
	Description:      "Legal Case Context Builder API - Build context for legal cases using directed acyclic graphs\n\nThis microservice provides a context builder for legal cases using directed acyclic graphs (DAGs).\nUsers traverse through question nodes to build comprehensive case context with evidence tracking,\ntimeline management, and legal assessment capabilities.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
