basePath: /v1
definitions:
  http.AnswerPresenter:
    description: An answer to a legal question with optional user context and structured
      metadata for evidence tracking
    properties:
      answer:
        example: Yes, age discrimination occurred
        type: string
      id:
        example: fc28c4b6-d185-cf56-a7e4-dead499ff1e8
        type: string
      metadata:
        additionalProperties: true
        type: object
      next_node:
        example: 8b007ce4-b676-5fb3-9f93-f5f6c41cb655
        type: string
      user_context:
        example: Manager explicitly mentioned my age during termination
        type: string
    type: object
  http.DAGContentPresenter:
    description: DAG content including ID, title, and all nodes with answers
    properties:
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      nodes:
        items:
          $ref: '#/definitions/http.NodePresenter'
        type: array
      title:
        example: Employment Discrimination Case
        type: string
    type: object
  http.DAGMetadataPresenter:
    description: DAG metadata including ID, title, validation status, and statistics
    properties:
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_valid:
        example: true
        type: boolean
      statistics:
        $ref: '#/definitions/http.ValidationStatisticsPresenter'
      title:
        example: Employment Discrimination Case
        type: string
    type: object
  http.DAGPresenter:
    description: Legal Case DAG with questions, answers, and context
    properties:
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      nodes:
        items:
          $ref: '#/definitions/http.NodePresenter'
        type: array
      title:
        example: Employment Discrimination Case
        type: string
    type: object
  http.DAGSummaryListPresenter:
    description: List of DAG summaries with essential information for efficient overview
    properties:
      count:
        type: integer
      dags:
        items:
          $ref: '#/definitions/http.DAGSummaryPresenter'
        type: array
    type: object
  http.DAGSummaryPresenter:
    description: Summary information for a DAG including ID, title, and validation
      status
    properties:
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_valid:
        example: true
        type: boolean
      title:
        example: Employment Discrimination Case
        type: string
    type: object
  http.NodePresenter:
    description: A question node with potential answers for legal case context building
    properties:
      answers:
        items:
          $ref: '#/definitions/http.AnswerPresenter'
        type: array
      id:
        example: 8b007ce4-b676-5fb3-9f93-f5f6c41cb655
        type: string
      question:
        example: Were you discriminated against in the workplace?
        type: string
    type: object
  http.ValidateRequest:
    description: DAG validation request containing the DAG structure to validate
    properties:
      dag:
        $ref: '#/definitions/http.DAGPresenter'
    required:
    - dag
    type: object
  http.ValidationErrorPresenter:
    description: Detailed validation error with context information
    properties:
      answer_id:
        example: fc28c4b6-d185-cf56-a7e4-dead499ff1e8
        type: string
      code:
        example: DAG_HAS_CYCLES
        type: string
      message:
        example: DAG contains 1 cycle(s). A valid DAG must be acyclic
        type: string
      node_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      severity:
        example: error
        type: string
    type: object
  http.ValidationResultPresenter:
    description: Comprehensive DAG validation results including errors, warnings,
      and statistics
    properties:
      errors:
        items:
          $ref: '#/definitions/http.ValidationErrorPresenter'
        type: array
      is_valid:
        example: true
        type: boolean
      statistics:
        $ref: '#/definitions/http.ValidationStatisticsPresenter'
      warnings:
        items:
          $ref: '#/definitions/http.ValidationWarningPresenter'
        type: array
    type: object
  http.ValidationStatisticsPresenter:
    description: Statistical information about the DAG structure and validation results
    properties:
      cycle_paths:
        items:
          type: string
        type: array
      has_cycles:
        example: false
        type: boolean
      leaf_node_ids:
        items:
          type: string
        type: array
      leaf_nodes:
        example: 2
        type: integer
      max_depth:
        example: 3
        type: integer
      root_node_ids:
        items:
          type: string
        type: array
      root_nodes:
        example: 1
        type: integer
      total_answers:
        example: 12
        type: integer
      total_nodes:
        example: 5
        type: integer
    type: object
  http.ValidationWarningPresenter:
    description: Non-critical validation issue that doesn't prevent DAG usage
    properties:
      answer_id:
        example: fc28c4b6-d185-cf56-a7e4-dead499ff1e8
        type: string
      code:
        example: DEEP_NESTING
        type: string
      message:
        example: DAG has deep nesting which may impact performance
        type: string
      node_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  xhttp.ErrorResponse:
    description: Standard error response format for API failures
    properties:
      error:
        example: DAG not found
        type: string
      message:
        example: failed to get DAG
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@legaltech.example.com
    name: Legal Tech Support
  description: |-
    Legal Case Context Builder API - Build context for legal cases using directed acyclic graphs

    This microservice provides a context builder for legal cases using directed acyclic graphs (DAGs).
    Users traverse through question nodes to build comprehensive case context with evidence tracking,
    timeline management, and legal assessment capabilities.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Jurigen API
  version: "1.0"
paths:
  /dags:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all available Legal Case DAGs with ID, title,
        and validation status
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved DAG list with summary information
          schema:
            $ref: '#/definitions/http.DAGSummaryListPresenter'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List Legal Case DAGs
      tags:
      - DAGs
  /dags/{dagId}:
    get:
      consumes:
      - application/json
      description: Retrieve DAG metadata including ID, title, validation status, and
        statistics (without content)
      parameters:
      - description: DAG unique identifier (UUID)
        in: path
        name: dagId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved DAG metadata
          schema:
            $ref: '#/definitions/http.DAGMetadataPresenter'
        "400":
          description: Invalid DAG ID format
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
        "404":
          description: DAG not found
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Legal Case DAG metadata
      tags:
      - DAGs
    put:
      consumes:
      - application/json
      description: Update a complete Legal Case DAG structure including questions,
        answers, and context
      parameters:
      - description: DAG unique identifier (UUID)
        in: path
        name: dagId
        required: true
        type: string
      - description: Updated DAG structure
        in: body
        name: dag
        required: true
        schema:
          $ref: '#/definitions/http.DAGPresenter'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated DAG
          schema:
            $ref: '#/definitions/http.DAGPresenter'
        "400":
          description: Invalid request body or DAG ID format
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
        "404":
          description: DAG not found
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Legal Case DAG
      tags:
      - DAGs
  /dags/{dagId}/content:
    get:
      consumes:
      - application/json
      description: Retrieve complete Legal Case DAG content including ID, title, and
        all questions with answers
      parameters:
      - description: DAG unique identifier (UUID)
        in: path
        name: dagId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved DAG content
          schema:
            $ref: '#/definitions/http.DAGContentPresenter'
        "400":
          description: Invalid DAG ID format
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
        "404":
          description: DAG not found
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Legal Case DAG content
      tags:
      - DAGs
  /dags/validate:
    post:
      consumes:
      - application/json
      description: Validate a DAG structure to ensure it meets all requirements (single
        root node, acyclic, valid relationships)
      parameters:
      - description: DAG structure to validate
        in: body
        name: dag
        required: true
        schema:
          $ref: '#/definitions/http.ValidateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: DAG validation completed (may contain errors)
          schema:
            $ref: '#/definitions/http.ValidationResultPresenter'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/xhttp.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Validate Legal Case DAG
      tags:
      - DAGs
securityDefinitions:
  ApiKeyAuth:
    description: Bearer token authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Operations for managing and retrieving Legal Case DAGs
  name: DAGs
