// Code generated by MockGen. DO NOT EDIT.
// Source: dag_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dag "davidterranova/jurigen/internal/dag"
	usecase "davidterranova/jurigen/internal/usecase"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockApp) Get(ctx context.Context, cmd usecase.CmdGetDAG) (*dag.DAG, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, cmd)
	ret0, _ := ret[0].(*dag.DAG)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAppMockRecorder) Get(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApp)(nil).Get), ctx, cmd)
}

// List mocks base method.
func (m *MockApp) List(ctx context.Context, cmd usecase.CmdListDAGs) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, cmd)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAppMockRecorder) List(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApp)(nil).List), ctx, cmd)
}

// Update mocks base method.
func (m *MockApp) Update(ctx context.Context, cmd usecase.CmdUpdateDAG) (*dag.DAG, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, cmd)
	ret0, _ := ret[0].(*dag.DAG)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAppMockRecorder) Update(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockApp)(nil).Update), ctx, cmd)
}
